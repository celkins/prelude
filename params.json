{"name":"Prelude","tagline":"Prelude is an enhanced Emacs configuration that should make your experience with Emacs both more pleasant and more powerful.","body":"Emacs Prelude\r\n=============\r\n\r\nPrelude is an Emacs distribution that aims to enhance the default\r\nEmacs experience.  Prelude alters a lot of the default settings,\r\nbundles a plethora of additional packages and adds its own core\r\nlibrary to the mix. The final product offers an easy to use Emacs\r\nconfiguration for Emacs newcomers and lots of additional power for\r\nEmacs power users.\r\n\r\nPrelude is compatible **ONLY with GNU Emacs 24.x**.\r\n\r\n## Fast Forward\r\n\r\nAssuming you're using an Unix-like OS (`*BSD`, `GNU/Linux`, `OS X`, `Solaris`,\r\netc), you already have Emacs 24 installed, as well as `git` & `curl` you\r\ncan skip the whole manual and just type in your favorite shell the\r\nfollowing command:\r\n\r\n```bash\r\n$ curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh\r\n```\r\n\r\nYou can now power up your Emacs, sit back and enjoy Prelude,\r\nforgetting about the rest of this manual.\r\n\r\nThere are two environment variables you can use to control the\r\nsource repository and the installation directory. To change the\r\ninstallation directory:\r\n\r\n```bash\r\n$ export PRELUDE_INSTALL_DIR=\"$HOME/.emacs.d\" && curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh\r\n```\r\n\r\nTo change the source repository:\r\n\r\n```bash\r\n$ export PRELUDE_URL=\"https://github.com/yourname/prelude.git\" && curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh\r\n```\r\n\r\nNote that the installer will back up any existing `.emacs` file or\r\n`.emacs.d` since it will unpack Prelude's code in `.emacs.d`. If\r\nyou're doing a manual install make sure you don't have a `.emacs` file\r\nor back up your existing `.emacs.d` directory manually.\r\n\r\nDon't forget to adjust your `prelude-modules.el` file once the installation is done.\r\nBy default most of the modules that ship with Prelude are not loaded.\r\n\r\n## Installing Emacs 24\r\n\r\nObviously to use the Emacs Prelude you have to install Emacs 24\r\nfirst. Have a look at the [WikEmacs articles on installing Emacs](http://wikemacs.org/wiki/Installing_Emacs).\r\n\r\n## Installation\r\n\r\n### Automated\r\n\r\nYou can install **Emacs Prelude** via the command line with either `curl` or\r\n`wget`. Naturally `git` is also required.\r\n\r\n#### Via Curl\r\n\r\nIf you're using `curl` type the following command:\r\n\r\n```bash\r\n$ curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh\r\n```\r\n\r\n#### Via Wget\r\n\r\nIf you're using `wget` type:\r\n\r\n```bash\r\n$ wget --no-check-certificate https://github.com/bbatsov/prelude/raw/master/utils/installer.sh -O - | sh\r\n```\r\n\r\n### Manual\r\n\r\n```bash\r\n$ git clone git://github.com/bbatsov/prelude.git path/to/local/repo\r\n$ ln -s path/to/local/repo ~/.emacs.d\r\n$ cd ~/.emacs.d\r\n```\r\n\r\nYou'd do well to replace `~/.emacs.d` with the value of\r\n`user-emacs-directory` for your OS. You can check the value by doing\r\n`C-h v user-emacs-directory` inside Emacs.\r\n\r\n## Updating Prelude\r\n\r\nThe update procedure is fairly straightforward:\r\n\r\n```bash\r\n$ cd path/to/prelude/installation\r\n$ git pull\r\n```\r\n\r\nThe `path/to/prelude/installation` is usually `~/.emacs.d` (at least\r\non Unix systems).\r\n\r\nAlternatively you can run <kbd>M-x prelude-update</kbd> from Emacs itself.\r\n\r\nIt's generally a good idea to stop Emacs before you do the update. The\r\nnext time Prelude starts it will install any new dependencies (if\r\nthere are such).\r\n\r\n## Enabling additional modules\r\n\r\nBy default most of the modules that ship with Prelude are not loaded.\r\n\r\n```lisp\r\n;;; Uncomment the modules you'd like to use and restart Prelude afterwards\r\n\r\n(require 'prelude-c)\r\n;; (require 'prelude-clojure)\r\n;; (require 'prelude-coffee)\r\n;; (require 'prelude-common-lisp)\r\n;; (require 'prelude-css)\r\n(require 'prelude-emacs-lisp)\r\n(require 'prelude-erc)\r\n;; (require 'prelude-erlang)\r\n;; (require 'prelude-haskell)\r\n(require 'prelude-js)\r\n;; (require 'prelude-latex)\r\n(require 'prelude-lisp)\r\n;; (require 'prelude-markdown)\r\n;; (require 'prelude-mediawiki)\r\n(require 'prelude-org)\r\n(require 'prelude-perl)\r\n;; (require 'prelude-python)\r\n;; (require 'prelude-ruby)\r\n;; (require 'prelude-scala)\r\n(require 'prelude-scheme)\r\n;; (require 'prelude-scss)\r\n(require 'prelude-xml)\r\n```\r\n\r\nYou'll need to adjust your `prelude-modules.el` file once the installation is done.\r\n\r\nAfter you've uncommented a module you should either restart Emacs or evaluate the module\r\n`require` expression with <kbd>C-x C-e</kbd>.\r\n\r\n## Running\r\n\r\nNothing fancy here. Just start Emacs as usual. Personally I run Emacs\r\nin daemon mode:\r\n\r\n```bash\r\n$ emacs --daemon\r\n```\r\n\r\nAfterwards I connect to the server with either a terminal or a GUI\r\nclient like this:\r\n\r\n```bash\r\n$ emacsclient -t\r\n$ emacsclient -c\r\n```\r\n\r\nYou'd probably do well to put a few aliases in your `.zshrc` (or\r\n`.bashrc`):\r\n\r\n```bash\r\nalias e=emacsclient -t\r\nalias ec=emacsclient -c\r\nalias vim=emacsclient -t\r\nalias vi=emacsclient -t\r\n```\r\n\r\nThe last two aliases are helpful if you're used to editing files from\r\nthe command line using `vi(m)`.\r\n\r\n## Getting to know Prelude\r\n\r\nCertainly the best way to understand how Prelude enhances the default\r\nEmacs experience is to peruse Prelude's source code (which is\r\nobviously written in Emacs Lisp). Understanding the code is not\r\nnecessary of course. Prelude includes a `prelude-mode` minor Emacs mode\r\nwhich collects some of the additional functionality added by\r\nPrelude. It also adds an additional keymap that binds many of those\r\nextensions to keybindings.\r\n\r\n### Keymap\r\n\r\n#### Global\r\n\r\nKeybinding         | Description\r\n-------------------|------------------------------------------------------------\r\n<kbd>C-M-h</kbd>   | Kill the previous word(`backward-kill-word`). (as in Bash/Zsh)\r\n<kbd>C-x \\</kbd>   | `align-regexp`\r\n<kbd>C-+</kbd>     | Increase font size(`text-scale-increase`).\r\n<kbd>C--</kbd>     | Decrease font size(`text-scale-decrease`).\r\n<kbd>C-x O</kbd>   | Go back to previous window (the inverse of `other-window` (`C-x o`)).\r\n<kbd>C-x ^</kbd>   | Join two lines into one(`join-line`).\r\n<kbd>C-x p</kbd>   | Start `proced` (manage processes form Emacs, works only in Linux).\r\n<kbd>C-x m</kbd>   | Start `eshell`.\r\n<kbd>C-x M-m</kbd> | Start your default shell.\r\n<kbd>C-x C-m</kbd> | Alias for `M-x`.\r\n<kbd>C-h A</kbd>   | Run `apropos` (search in all Emacs symbols).\r\n<kbd>M-\\</kbd>     | Run `hippie-expand` (a replacement for the default `dabbrev-expand`).\r\n<kbd>C-x C-b</kbd> | Open `ibuffer` (a replacement for the default `buffer-list`).\r\n<kbd>F12</kbd>     | Toggle the Emacs menu bar.\r\n<kbd>C-x g</kbd>   | Open Magit's status buffer.\r\n<kbd>C-=</kbd>     | Run `expand-region` (incremental text selection).\r\n\r\n#### Prelude Mode\r\n\r\nKeybinding         | Description\r\n-------------------|------------------------------------------------------------\r\n<kbd>C-c o</kbd>   | Open the currently visited file with an external program.\r\n<kbd>C-c g</kbd>   | Search in Google for the thing under point (or an interactive query).\r\n<kbd>S-RET</kbd>   | Insert an empty line and indent it properly (as in most IDEs).\r\n<kbd>C-S-up</kbd>  | Move the current line up.\r\n<kbd>C-S-down</kbd> | Move the current line down.\r\n<kbd>C-c n</kbd> | Fix indentation in buffer and strip whitespace.\r\n<kbd>C-c f</kbd> | Open recently visitted file.\r\n<kbd>C-M-\\</kbd> | Indent region (if selected) or the entire buffer.\r\n<kbd>C-c u</kbd> | Open URL in your default browser.\r\n<kbd>C-c e</kbd> | Eval a bit of Emacs Lisp code and replace it with its result.\r\n<kbd>C-c s</kbd> | Swap two active windows.\r\n<kbd>C-c d</kbd> | Duplicate the current line (or region).\r\n<kbd>C-c r</kbd> | Rename the currently visited file and buffer.\r\n<kbd>C-c t</kbd> | Open a terminal emulator (`ansi-term`).\r\n<kbd>C-c k</kbd> | Kill all open buffers except the one you're currently in.\r\n<kbd>C-c h</kbd> | Open Helm (a useful means of navigating your buffers and project files).\r\n\r\n#### Projectile\r\n\r\nHere's a list of functionality provided by [Projectile](https://github.com/bbatsov/prelude):\r\n\r\nKeybinding         | Description\r\n-------------------|------------------------------------------------------------\r\n<kbd>C-c p f</kbd> | Display a list of all files in the project. With a prefix argument it will clear the cache first.\r\n<kbd>C-c p T</kbd> | Display a list of all test files(specs, features, etc) in the project.\r\n<kbd>C-c p g</kbd> | Run grep on the files in the project.\r\n<kbd>C-c p b</kbd> | Display a list of all project buffers currently open.\r\n<kbd>C-c p o</kbd> | Runs `multi-occur` on all project buffers currently open.\r\n<kbd>C-c p r</kbd> | Runs interactive query-replace on all files in the projects.\r\n<kbd>C-c p i</kbd> | Invalidates the project cache (if existing).\r\n<kbd>C-c p R</kbd> | Regenerates the projects `TAGS` file.\r\n<kbd>C-c p k</kbd> | Kills all project buffers.\r\n<kbd>C-c p d</kbd> | Opens the root of the project in `dired`.\r\n<kbd>C-c p e</kbd> | Shows a list of recently visited project files.\r\n<kbd>C-c p a</kbd> | Runs `ack` on the project. Requires the presence of `ack-and-a-half`.\r\n<kbd>C-c p l</kbd> | Runs a standard compilation command for your type of project.\r\n<kbd>C-c p p</kbd> | Runs a standard test command for your type of project.\r\n<kbd>C-c p z</kbd> | Adds the currently visited to the cache.\r\n<kbd>C-c p s</kbd> | Display a list of known projects you can switch to.\r\n\r\nIf you ever forget any of Projectile's keybindings just do a:\r\n\r\n<kbd>C-c p C-h</kbd>\r\n\r\n### Automatic package installation\r\n\r\nThe default Prelude installation comes with a bare minimum of\r\nfunctionality. It will however install add-ons for various programming\r\nlanguages and frameworks on demand. For instance - if you try to open\r\na `.clj` file `clojure-mode`, `nrepl.el` and prelude's enhanced Lisp\r\nconfiguration will be installed automatically for you.\r\n\r\nYou can, of course, install anything you wish manually as well.\r\n\r\n### Color Themes\r\n\r\nEmacs 24 ships with a new theming facility that effectively renders\r\nthe old color-theme package obsolete. Emacs 24 provides a dozen of\r\nbuilt-in themes you can use out-of-the-box by invoking the `M-x\r\nload-theme` command.\r\n\r\n[Zenburn](https://github.com/bbatsov/zenburn-emacs) is the default color theme in Prelude, but you can change it\r\nat your discretion. Why Zenburn? I (and lots of hackers around the\r\nworld) find it pretty neat for some reason. Personally I find the\r\ndefault theme pretty tiresome for the eyes, that's why I took that\r\n\"controversial\" decision to replace it. You can, of course, easily go\r\nback to the default (or select another theme entirely).\r\n\r\nTo disable Zenburn just put in your personal config the following\r\nline:\r\n\r\n```lisp\r\n(disable-theme 'zenburn)\r\n```\r\n\r\nOr you can use another theme altogether by adding something like:\r\n\r\n```lisp\r\n(load-theme 'solarized-dark t)\r\n```\r\n\r\nP.S. Solarized is not available by default - you'll have to install it from MELPA first.\r\n\r\n### Personalizing\r\n\r\nFork the official Prelude repo and add your own touch to it. You're advised to avoid changing stuff outside of the\r\npersonal folder to avoid having to deal with git merge conflicts in the future.\r\n\r\nIf you'd like to add some auto installation of packages in your\r\npersonal config use the following code:\r\n\r\n```lisp\r\n(prelude-ensure-module-deps '(some-package some-other-package))\r\n```\r\n\r\n#### Disabling whitespace-mode\r\n\r\nAlthough `whitespace-mode` is awesome some people might find it too\r\nintrusive. You can disable it in your\r\npersonal config with the following bit of code:\r\n\r\n```lisp\r\n(setq prelude-whitespace nil)\r\n```\r\n\r\nIf you like `whitespace-mode` but prefer it to not automatically\r\ncleanup your file on save, you can disable that behavior by setting\r\nprelude-clean-whitespace-on-save to nil in your config file with:\r\n\r\n```lisp\r\n(setq prelude-clean-whitespace-on-save nil)\r\n```\r\n\r\nThe prelude-clean-whitespace-on-save setting can also be set on a\r\nper-file or directory basis by using a file variable or a\r\n.dir-locals.el file.\r\n\r\n\r\n#### Disable flyspell-mode\r\n\r\nIf you're not fond of spellchecking on the fly:\r\n\r\n```lisp\r\n(setq prelude-flyspell nil)\r\n```\r\n\r\n## Caveats & Pitfalls\r\n\r\n### Problems with flyspell-mode\r\n\r\nPrelude makes heavy use of the flyspell-mode package for spell\r\nchecking of various things. The proper operation of flyspell depends\r\non the presence of the `aspell` program and an `en` dictionary on your\r\nsystem. You can install `aspell` and the dictionary on OS X with\r\n`homebrew` like this:\r\n\r\n```bash\r\n$ brew install aspell --with-lang=en\r\n```\r\n\r\nOn Linux distros - just use your distro's package manager.\r\n\r\n### Ugly colors in the terminal Emacs version\r\n\r\nIf your Emacs looks considerably uglier in a terminal (compared to the\r\nGUI version) try adding this to your `.bashrc` or `.zshrc`:\r\n\r\n```bash\r\n$ export TERM=xterm-256color\r\n```\r\n\r\nSource the `.bashrc` file and start Emacs again.\r\n\r\n### MELPA error on initial startup\r\n\r\nIf you get some http connection error related to the MELPA repo\r\njust do a manual `M-x package-refresh-contents` and restart Emacs\r\nafterwards.\r\n\r\n### No arrow navigation in editor buffers\r\n\r\nThis is not a bug - it's a feature! I firmly believe that the one true\r\nway to use Emacs is by using it the way it was intended to be used (as\r\nfar as navigation is concerned at least). That's why I've disabled all\r\nmovement commands with arrows (and keys like page up, page down, etc) - to prevent you from being tempted to\r\nuse them.\r\n\r\nIf you'd still like to use the arrow keys just invoke `M-x\r\nguru-mode` to enable them for the duration of your\r\ncurrent Emacs session or add the following snippet to your\r\npersonal Emacs customization to enable them permanently:\r\n\r\n```lisp\r\n(setq prelude-guru nil)\r\n```\r\n\r\n### Windows compatibility\r\n\r\nWhile everything in Prelude should work fine in Windows, I test it only\r\nwith Linux & OSX, so there are Windows related problems from time to\r\ntime. This situation will probably improve over time.\r\n\r\n## Share the knowledge\r\n\r\n[WikEmacs](http://wikemacs.org) collects useful resources for working\r\nwith GNU Emacs. Please, take the time to peruse and improve them as\r\nyou accumulate knowledge about Emacs. Prelude makes this especially\r\neasy, since it bundles\r\n[MediaWiki support](http://wikemacs.org/wiki/Mediawiki.el) + the\r\nsettings required to access WikEmacs right away.\r\n\r\n## Known issues\r\n\r\nCheck out the project's\r\n[issue list](https://github.com/bbatsov/prelude/issues?sort=created&direction=desc&state=open)\r\na list of unresolved issues. By the way - feel free to fix any of them\r\nand send me a pull request. :-)\r\n\r\n## Support\r\n\r\nSupport is available via the Prelude Google Group <emacs-prelude@googlegroups.com>.\r\n\r\n## Contributors\r\n\r\nHere's a [list](https://github.com/bbatsov/prelude/contributors) of all the people who have contributed to the\r\ndevelopment of Emacs Prelude.\r\n\r\n## Bugs & Improvements\r\n\r\nBug reports and suggestions for improvements are always\r\nwelcome. GitHub pull requests are even better! :-)\r\n\r\nCheers,<br/>\r\n[Bozhidar](https://twitter.com/bbatsov)\r\n","google":"UA-30626419-1","note":"Don't delete this file! It's used internally to help with page regeneration."}